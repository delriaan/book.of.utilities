#' @param x The input vector
#' @param ... (\code{\link[rlang]{dots_list}}): Additional arguments sent to \code{\link[stats]{quantile}}
#'
#' @return A quantile representation of the input
#' @family Calculators
#' @export
q.vec <- rlang::inject(quantile(x = x, ...));
idx <- sapply(x, function(i){ max(which(q.vec <= i))})
return(q.vec[idx])
}
list(set_1 = sample(30, 10)
, set_2 = sample(90, 10)
) |>
print() |>
calc.means(mean.type = c("am", "hm"));
#
calc.means <- function(data, mean.type = "am", post.op = eval, as.zscore = FALSE, use.population = FALSE, ...){
#' Calculate Means
#'
#' \code{calc.means} calculates various types of central-tendency measures for the vector passed to argument \code{a}
#'
#' If `mean.type` contains multiple values, a list object is returned containing one member for each output; otherwise, a single value is returned with a class dependent on the value of `mean.type`.
#' Valid `mean.type` values are as follows:
#' \enumerate{
#' \item "am" (Arithmetic-Mean \url{https://en.wikipedia.org/wiki/Arithmetic_mean}): Return the sum of vector values divided by the magnitude of the vector
#' \item "zm" (Zero-Mean): Return the vector with the mean of the vector subtracted from all values
#' \item "gm" (Geometric Mean \url{https://en.wikipedia.org/wiki/Geometric_mean}): Return the \emph{n-th} root of the product of an \emph{n}-element input vector.  Negative input values are allowed, resulting in a complex result
#' \item "hm" (Harmonic Mean \url{https://en.wikipedia.org/wiki/Harmonic_mean}): Return the reciprocal of the arithmetic mean of the reciprocal of the elements of the input vector
#' \item "rms"(Root Mean Squared \url{https://en.wikipedia.org/wiki/Root_mean_square}): Return the square-root of the arithmetic mean of the squares of the elements of the input vector
#' }
#'
#' @param data (numeric): A numeric vector
#' @param mean.type (string): A character vector of the types of mean value operations to execute (see "Details")
#' @param post.op (call | \code{\link[base]{eval}}): A function that will process the output before returning
#' @param as.zscore (logical | \code{FALSE}) Should the output be transformed to Z-scores?
#' @param use.population (logical | \code{FALSE}) Should the population standard deviation be used (ignored when \code{as.zscore==FALSE})?
#' @param ... Additional arguments passed to other functions
#'
#' @return Arguments \code{data}, \code{mean.type}, and \code{post.op} determine the return type.
#'
#' @family Central-tendency calculations
#'
#' @importFrom magrittr %>% %<>%
#'
#' @export
check_z <- rlang::inject(purrr::as_mapper(~if (!!as.zscore & (.y == "zm")){
if (!!use.population){
.x/sqrt(mean(.x^2, na.rm = TRUE))
} else { .x/sd(.x, na.rm = TRUE) }
} else { .x }));
func.list <- list(
am = function(i, ...){
i %<>% as.vector();
mean(i, na.rm = TRUE, ...);
}
, zm = function(i, ...){
i %<>% as.vector();
(i - mean(i, na.rm = TRUE, ...));
}
, gm = function(i){
i %<>% as.vector();
i[!i == 0] |>
purrr::modify_if(any(sign(.x) == -1), as.complex) |>
prod(na.rm = TRUE) %>%
magrittr::raise_to_power(-length(.))
}
, hm = function(i){
i %<>% as.vector();
i[!i == 0] %>%
magrittr::raise_to_power(-1) |>
mean(na.rm = TRUE) |>
magrittr::raise_to_power(-1)
}
, rms = function(i, ...){
i %<>% as.vector();
mean(i^2, na.rm = TRUE, ...) |>
purrr::modify_if(any(sign(.x) == -1), ~as.complex(.x, ...)) |>
sqrt()
}
);
if (any(mean.type %in% c("*", "all"))){ mean.type <- names(func.list) }
output <- if ("list" %in% class(data)){
purrr::imap(func.list[mean.type], ~{
f <- .x;
nm <- .y
purrr::map(data, ~f(.x) |> check_z(nm))
})
} else if (any(is.data.frame(data) || data.table::is.data.table(data) || is.matrix(data) || is.array(data))){
purrr::imap(func.list[mean.type], ~apply(X = data, MARGIN = 2, FUN = .x) |> check_z(.y))
} else {
purrr:i:map(func.list[mean.type], ~.x(data) |> check_z(.y))
}
post.op(if (rlang::has_length(output, 1)){ output[[1]] } else { output });
}
list(set_1 = sample(30, 10)
, set_2 = sample(90, 10)
) |>
print() |>
calc.means(mean.type = c("am", "hm"));
# Array/Matrix output
calc.means(list(set_1 = sample(30, 10), set_2 = sample(30, 10)), mean.type = c("am", "hm"), post.op = simplify2array);
calc.harmonic_mean(list(set_1 = sample(30, 10), set_2 = sample(30, 10)), post.op = simplify2array)
# Array/Matrix output
list(set_1 = sample(30, 10), set_2 = sample(90, 10)) |>
print() |>
calc.means(post.op = simplify2array);
list(set_1 = sample(30, 10), set_2 = sample(90, 10)) |>
print() |>
calc.means(mean.type = c("am", "hm"), post.op = simplify2array);
list(set_1 = sample(30, 10), set_2 = sample(90, 10)) |>
print() |>
calc.means(mean.type = c("am", "hm", "zm"), post.op = simplify2array);
list(set_1 = sample(30, 10), set_2 = sample(90, 10)) |>
print() |>
calc.means(mean.type = c("am", "hm", "zm"), post.op = simplify2array, as.zscore = TRUE);
list(set_1 = sample(30, 10), set_2 = sample(90, 10)) |>
print() |>
calc.means(mean.type = c("am", "hm", "zm"), post.op = simplify2array, as.zscore = TRUE) |> str()
list(set_1 = sample(30, 10), set_2 = sample(90, 10)) |>
print() |>
calc.means(mean.type = c("am", "hm", "zm"), post.op = simplify2array, as.zscore = TRUE, use.population = TRUE) |> str()
# List Output
x <- list(set_1 = sample(30, 10), set_2 = sample(90, 10))
print(x) |>
calc.harmonic_mean();
print(x) |>
calc.means(mean.type = c("am", "hm"));
# Array/Matrix output
print(x) |>
calc.means(post.op = simplify2array);
print(x) |>
calc.means(mean.type = c("am", "hm", "zm"), post.op = simplify2array) |> str()
print(x) |>
calc.means(mean.type = c("am", "hm", "zm"), post.op = simplify2array, as.zscore = TRUE) |> str()
print(x) |>
calc.means(mean.type = c("am", "hm", "zm"), post.op = simplify2array, as.zscore = TRUE, use.population = TRUE) |> str()
#
# enlist() ====
# Test Objects
test_x = list(
test_1 = c(1:5)
, test_2 = list(c(1:5), 3, 4, c(letters[1:5]))
);
nms = c("up", "down", "left", "right", "center");
# :: Unnamed Vector -> Elements become names
enlist(test_x$test_1);
source("D:/Imperial Git Repos/book.of.utilities/R/2. object_management.R")
# :: Unnamed Vector -> Elements become names
enlist(test_x$test_1);
enlist(test_x$test_2);
# :: Unnamed Vector & Provided Names (Full) -> All elements have names in 'nms'
enlist(test_x$test_1, nms);
enlist(test_x$test_2, nms);
test_x$test_2
enlist(test_x$test_2, up, down, left, right, center);
enlist(test_x$test_2, !!nms);
enlist(test_x$test_2, !!!nms);
# %>% Unnamed Vector & Provided Names (Partial) -> First two names are 'nms[1:2]' with the balance as default
enlist(test_x$test_1, nms[1:2]);
nms[1:2]
# %>% Unnamed Vector & Provided Names (Partial) -> First two names are 'nms[1:2]' with the balance as default
enlist(test_x$test_1, !!!nms[1:2]);
enlist(test_x$test_2, !!!nms[1:2])
#
get.object_sizes <- function(i = .GlobalEnv, nm = as.character(substitute(i)), depth = 0L, max.depth = 2L, chatty = FALSE, ...){
#' Recursive Object Size Retrieval
#'
#' \code{get.object_sizes} recursively steps into child environments, retrieving object sizes along the way
#'
#' @param i (object) The top-level object
#' @param nm (string) The object name for the current iteration
#' @param depth (integer) The current iteration depth
#' @param max.depth (integer) The maximum recursion depth
#' @param chatty (logical) Execution messages
#' @param ... Additional arguments passed to \code{\link[base]{ls}}
#'
#' @return A vector of object sizes
#' @family Object management
#'
#' @export
if (class(i)[1] == "environment"){
imap(mget(ls(i, ...), envir = i), ~{
if (chatty){ message(sprintf("Stepping into %s", .y)) }
get_sizes(
i = .x
, nm = paste(nm, .y, sep = "$")
, depth = depth + 1
, max.depth = max.depth
);
}) |>
reduce(rbind) |>
data.table::setattr("timestamp", Sys.time())
} else {
.out <- list(obj_path = stringi::stri_replace_first_regex(nm, "[.]GlobalEnv[$]", "")
, depth = depth, size = object.size(i));
units <- which(c(b = 0, Kb = 1, Mb = 2, Gb = 3) <= log(.out$size, base = 1024)) |>
names() %>% .[length(.)];
.out$size_desc <- format(.out$size, units = units);
.out;
}
}
#
# vlogical() ====
vlogical(
vector = data.table::data.table(t(sapply(1:100000, function(i){ c(a = sample(LETTERS, 1), b = sample(letters, 1)) })))
, c(sample(LETTERS, 5), sample(letters, 5))
, test = function(vector, q, ...){ any(unique(vector) %in% unique(q))}
, simplify_with = mean
, ignore.case = TRUE
)
# ----
get.object_sizes()
get.object_sizes <- function(i = .GlobalEnv, nm = as.character(substitute(i)), depth = 0L, max.depth = 2L, chatty = FALSE, ...){
#' Recursive Object Size Retrieval
#'
#' \code{get.object_sizes} recursively steps into child environments, retrieving object sizes along the way
#'
#' @param i (object) The top-level object
#' @param nm (string) The object name for the current iteration
#' @param depth (integer) The current iteration depth
#' @param max.depth (integer) The maximum recursion depth
#' @param chatty (logical) Execution messages
#' @param ... Additional arguments passed to \code{\link[base]{ls}}
#'
#' @return A vector of object sizes
#' @family Object management
#'
#' @export
if (class(i)[1] == "environment"){
purrr::imap(mget(ls(i, ...), envir = i), ~{
if (chatty){ message(sprintf("Stepping into %s", .y)) }
get_sizes(
i = .x
, nm = paste(nm, .y, sep = "$")
, depth = depth + 1
, max.depth = max.depth
);
}) |>
purrr::reduce(rbind) |>
data.table::setattr("timestamp", Sys.time())
} else {
.out <- list(obj_path = stringi::stri_replace_first_regex(nm, "[.]GlobalEnv[$]", "")
, depth = depth, size = object.size(i));
units <- which(c(b = 0, Kb = 1, Mb = 2, Gb = 3) <= log(.out$size, base = 1024)) |>
names() %>% .[length(.)];
.out$size_desc <- format(.out$size, units = units);
.out;
}
}
# ----
get.object_sizes()
get.object_sizes <- function(i = .GlobalEnv, nm = as.character(substitute(i)), depth = 0L, max.depth = 2L, chatty = FALSE, ...){
#' Recursive Object Size Retrieval
#'
#' \code{get.object_sizes} recursively steps into child environments, retrieving object sizes along the way
#'
#' @param i (object) The top-level object
#' @param nm (string) The object name for the current iteration
#' @param depth (integer) The current iteration depth
#' @param max.depth (integer) The maximum recursion depth
#' @param chatty (logical) Execution messages
#' @param ... Additional arguments passed to \code{\link[base]{ls}}
#'
#' @return A vector of object sizes
#' @family Object management
#'
#' @export
if (class(i)[1] == "environment"){
purrr::imap(mget(ls(i, ...), envir = i), ~{
if (chatty){ message(sprintf("Stepping into %s", .y)) }
get.object_sizes(
i = .x
, nm = paste(nm, .y, sep = "$")
, depth = depth + 1
, max.depth = max.depth
);
}) |>
purrr::reduce(rbind) |>
data.table::setattr("timestamp", Sys.time())
} else {
.out <- list(obj_path = stringi::stri_replace_first_regex(nm, "[.]GlobalEnv[$]", "")
, depth = depth, size = object.size(i));
units <- which(c(b = 0, Kb = 1, Mb = 2, Gb = 3) <= log(.out$size, base = 1024)) |>
names() %>% .[length(.)];
.out$size_desc <- format(.out$size, units = units);
.out;
}
}
#
# ----
get.object_sizes()
# ----
get.object_sizes() |> View()
#
# *regex ====
as.regex("test") |> is.regex() # TRUE
source("D:/Imperial Git Repos/book.of.utilities/R/5. miscellaneous.R")
#
# *regex ====
as.regex("test") |> is.regex() # TRUE
c(as.regex("test", "this"), "or_that") |> is.regex() # TRUE TRUE FALSE
unregex(i = c(as.regex("mp|[cye]+"), "hp", "hq"), x = colnames(mtcars)) #  "mpg"  "cyl"  "qsec" "gear" "carb" "hp
source("D:/Imperial Git Repos/book.of.utilities/R/5. miscellaneous.R")
unregex(i = c(as.regex("mp|[cye]+"), "hp", "hq"), x = colnames(mtcars)) #  "mpg"  "cyl"  "qsec" "gear" "carb" "hp
#
unregex <- function(i, x){
#' Convert REGEX Pattern to Object Names
#'
#' @param i (string[]) A string or string vector.  Pattern matching is executed if the string is of class regex" (see \code{as.regex}, \code{is.regex})
#' @param x (object) The names to search OR an object with column names
#'
#' @return Matching values in \code{x} based on values of \code{i}
#'
#' @export
x = if (any(class(x) %in% c("data.table", "data.frame", "tibble"))){ names(x) } else { x }
reg.needle = i[is.regex(i)] |> unlist();
no_reg.needle = i[!is.regex(i)] |> unlist();
reg.match = if (!rlang::is_empty(reg.needle)){ x[grepl(paste(reg.needle, collapse = "|"), x)] }
no_reg.match = if (!rlang::is_empty(no_reg.needle)){ intersect(x, no_reg.needle) }
c(if (!any(rlang::is_empty(reg.match))) reg.match, if (!any(rlang::is_empty(no_reg.match))) no_reg.match);
}
unregex(i = c(as.regex("mp|[cye]+"), "hp", "hq"), x = colnames(mtcars)) #  "mpg"  "cyl"  "qsec" "gear" "carb" "hp
unregex(i = c(as.regex("mp|[cye]+"), "hp", "hq"), x = mtcars) #  "mpg"  "cyl"  "qsec" "gear" "carb" "hp
# ::: ----
x <- data.table::data.table(i = sample(100, 10), j = sample(100, 10), key = c("i", "j")) |> unique()
y <- data.table::data.table(i = sample(200, 10, TRUE), j = sample(200, 10, TRUE), key = c("i", "j")) |> unique()
z <- x %><% y
source("D:/Imperial Git Repos/book.of.utilities/R/4. custom operators.R")
z <- x %><% y
q <- x %::% y
v <- z %??% q
z <- x %><% y
}
z <- x %><% y
}
#
`%><%` <- function(a, z, temporal = FALSE, as.text = FALSE, debug = FALSE){
#' "Between" Operator
#'
#' \code{\%><\%} chunks out each of the inputs using row-wise 'apply' and returns a boolean result matrix. When arguments \code{a} and \code{z} are vectors or tensors, "between" is interpreted as the existence of the intersection of the domains spanned by the vectors/tensors. When \code{temporal} is \code{TRUE}, an ordinal response is returned depending on the value of \code{as.text}
#'
#' \code{as.text FALSE}: the return matrix is comprised of \code{"-1, 0, 1"} denoting \code{"before" "during" "after"}
#'
#' \code{as.text TRUE}: the return matrix is comprised of \code{"before" "during" "after"}
#'
#' @param a Preferrably a data table or data frame, but any object that can be coerced into such
#' @param z Preferrably a data table or data frame, but any object that can be coerced into such
#' @param temporal (logical) Should relative temporal output, e.g., `before`, `during`, `after`, be returned as integers -1 0 1 rather than logical values?
#' @param as.text (logical) Should relative temporal output, e.g., `before`, `during`, `after`, be returned as words rather than logical values?
#'
#' @return An Boolean object comprised of the results of testing for "between-ness"
#'
#' @family Custom operators
#'
#' @export
if (FALSE %in% c(grepl("(frame|table|tibble|atrix)", class(z)), rlang::has_length(unlist(z), 1))){
stop("Argument 'z' cannot be a single value: two values are required at a minimum")
}
if (!data.table::is.data.table(a)){ a %<>% data.table::as.data.table() }
if (!data.table::is.data.table(z)){ z %<>% data.table::as.data.table() }
# The case of a single-valued `a` argument is addressed by choosing the `*apply` function based on its length
apply.exprs <- list(
stage.apply = c(quote({ inner.loop(a) }), quote({ a[, apply(.SD, 1, inner.loop)] }))
, stage.dimname = c(quote({ as.character(a) }), quote({ apply(a, 1, stringi::stri_flatten, collapse = ":") }))
);
inner.loop <- function(o){
sub_fn = function(i, j, k) {
i %<>% unlist(); j %<>% unlist(); k %<>% unlist();
if (!(j | k)) {
# :: Default mode of "between-ness"
(min(o, na.rm = TRUE) <= max(i, na.rm = TRUE)) & (max(o, na.rm = TRUE) >= min(i, na.rm = TRUE))
} else {
# :: Temporal mode to return "before"(-1), "during"(0), "after"(1)
t1 = min(o) > max(i, na.rm = TRUE)
t2 = (min(o) <= max(i)) & (max(o, na.rm = TRUE) >= min(i, na.rm = TRUE))
t3 = c(1, 0, -1)[max(which(t1, t2, TRUE), na.rm = TRUE)]
# :: Temporal mode to return "before"(-1), "during"(0), "after"(1)
if (k) { c("-1" = "before", "0" = "during", "1" = "after")[as.character(t3)] } else { t3 }
}
}
o %<>% unlist();
z[, apply(.SD, 1, sub_fn, temporal, as.text)]
}
apply.exprs$stage.apply[[1 + as.integer(length(unlist(a)) > 1)]] %>%
eval() %>% { if (debug) { assign("debug.op.btwn", eval(.), envir = .GlobalEnv) }; .;} %>%
matrix(
nrow	= nrow(a), byrow 		= TRUE
, dimnames	= list(
apply.exprs$stage.dimname[[1 + as.integer(length(unlist(a)) > 1)]] |> eval()
, apply(z, 1, stringi::stri_flatten, collapse = ":")
)
)
}
z <- x %><% y
q <- x %::% y
#
`%><%` <- function(a, z, temporal = FALSE, as.text = FALSE, debug = FALSE){
#' "Between" Operator
#'
#' \code{\%><\%} chunks out each of the inputs using row-wise 'apply' and returns a boolean result matrix. When arguments \code{a} and \code{z} are vectors or tensors, "between" is interpreted as the existence of the intersection of the domains spanned by the vectors/tensors. When \code{temporal} is \code{TRUE}, an ordinal response is returned depending on the value of \code{as.text}
#'
#' \code{as.text FALSE}: the return matrix is comprised of \code{"-1, 0, 1"} denoting \code{"before" "during" "after"}
#'
#' \code{as.text TRUE}: the return matrix is comprised of \code{"before" "during" "after"}
#'
#' @param a Preferrably a data table or data frame, but any object that can be coerced into such
#' @param z Preferrably a data table or data frame, but any object that can be coerced into such
#' @param temporal (logical) Should relative temporal output, e.g., `before`, `during`, `after`, be returned as integers -1 0 1 rather than logical values?
#' @param as.text (logical) Should relative temporal output, e.g., `before`, `during`, `after`, be returned as words rather than logical values?
#'
#' @return An Boolean object comprised of the results of testing for "between-ness"
#'
#' @family Custom operators
#'
#' @export
if (!data.table::is.data.table(a)){ a %<>% data.table::as.data.table() }
if (!data.table::is.data.table(z)){ z %<>% data.table::as.data.table() }
# The case of a single-valued `a` argument is addressed by choosing the `*apply` function based on its length
apply.exprs <- list(
stage.apply = c(quote({ inner.loop(a) }), quote({ a[, apply(.SD, 1, inner.loop)] }))
, stage.dimname = c(quote({ as.character(a) }), quote({ apply(a, 1, stringi::stri_flatten, collapse = ":") }))
);
inner.loop <- function(o){
sub_fn = function(i, j, k) {
i %<>% unlist(); j %<>% unlist(); k %<>% unlist();
if (!(j | k)) {
# :: Default mode of "between-ness"
(min(o, na.rm = TRUE) <= max(i, na.rm = TRUE)) & (max(o, na.rm = TRUE) >= min(i, na.rm = TRUE))
} else {
# :: Temporal mode to return "before"(-1), "during"(0), "after"(1)
t1 = min(o) > max(i, na.rm = TRUE)
t2 = (min(o) <= max(i)) & (max(o, na.rm = TRUE) >= min(i, na.rm = TRUE))
t3 = c(1, 0, -1)[max(which(t1, t2, TRUE), na.rm = TRUE)]
# :: Temporal mode to return "before"(-1), "during"(0), "after"(1)
if (k) { c("-1" = "before", "0" = "during", "1" = "after")[as.character(t3)] } else { t3 }
}
}
o %<>% unlist();
z[, apply(.SD, 1, sub_fn, temporal, as.text)]
}
apply.exprs$stage.apply[[1 + as.integer(length(unlist(a)) > 1)]] %>%
eval() %>% { if (debug) { assign("debug.op.btwn", eval(.), envir = .GlobalEnv) }; .;} %>%
matrix(
nrow	= nrow(a), byrow 		= TRUE
, dimnames	= list(
apply.exprs$stage.dimname[[1 + as.integer(length(unlist(a)) > 1)]] |> eval()
, apply(z, 1, stringi::stri_flatten, collapse = ":")
)
)
}
z <- x %><% y
(z <- x %><% y)
(q <- x %::% y)
#
`%tf%`  <- function(true = TRUE, false = FALSE, id = 0, ...){
#' Decision Operator: \code{\%tf\%}
#'
#' Use \code{\%tf\%} or \code{\%::\%} anywhere where binary choice vectors can be useful
#'
#' @param tr (logical) : Scalar or vector value to return as the TRUE  value
#' @param fls (logical) : Scalar or vector value to return as the FALSE value
#' @param id (scalar) : Scalar or vector value to return as the identifier for the result
#' @param ... (Not used)
#'
#' @return a \code{\link[data.table]{data.table}} of resultant values options for `true` and `false`
#'
#' @family Custom operators
#'
#' @export
if (!rlang::is_empty(dim(true))){ true <- apply(true, 1, as.list) }
if (!rlang::is_empty(dim(false))){ false <- apply(false, 1, as.list) }
# if (length(tr) != length(fls)) { stop("Vectors for TRUE and FALSE must be of the same length: exiting ...") }
data.table::as.data.table(list(false = false, true = true, id = c(id)))
}
#' @export
`%::%` <- `%tf%`
source("D:/Imperial Git Repos/book.of.utilities/R/4. custom operators.R")
(q <- x %::% y)
(v <- z %??% q)
?`%do%`
foreach::`%do%`
}
}
#
`%??%` <- function(cond, result){
#' Correlated IF-THEN-ELSE Comparison
#'
#' For each element \code{E} in \code{cond}, when \code{E} is \code{TRUE}, the corresponding index of \code{result$true} is returned: the same for \code{cond == FALSE}.
#' For \code{result}, the easiest way to set the available choices is to use \code{\link{\%::\%}}; otherwise, a environment(-like) object with members named \code{true} and \code{false}
#'
#' @param cond (logical) A \emph{vector} or \emph{tensor} that evaluates to \code{TRUE} or \code{FALSE}
#' @param result (vector) Resultant values for TRUE and FALSE conditionals, ideally stored in a dimension-ed object (e.g, \code{\link[base]{data.frame}}, \code{\link[data.table]{data.table}})
#'
#' @family Custom operators
#'
#' @export
#'
if (is.environment(result)){ result <<- data.table::as.data.table(mget(c("true", "false"), envir = result)) }
if (!data.table::is.data.table(result)){ result <<- data.table::as.data.table(result) }
foreach::`%do%`(
foreach::foreach(x = cond, y = iterators::iapply(X = result, MARGIN = 1), id = sequence(length(cond)), .combine = rbind)
, `%?%`(x, y)
)
}
(v <- z %??% q)
(z <- x %><% y) |> str()
(q <- x %::% y) |> str()
(v <- z %??% q) |> str()
purrr::reduce(v$result, rbind)
View(v)
library(book.of.utilities)
pkgdown::build_site()
