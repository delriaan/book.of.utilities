file.copy(to = getwd())
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_last_fixed(".r", "") |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = c
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
htmltools::html_print(viewer = NULL) |>
file.copy(to = getwd())
getwd()
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_last_fixed(".r", "") |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = c
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
htmltools::html_print(viewer = NULL) |>
file.copy(to = paste0("pkg/toc.html"))
readLines("toc.html") |> paste(collapse = "\n")
getwd()
readLines("pkg/toc.html") |> paste(collapse = "\n")
readLines("pkg/toc.html") |> paste(collapse = "\n") |> htmltools::HTML()
readLines("pkg/toc.html") |> paste(collapse = "\n") |> htmltools::tagList()
library(book.of.utilities)
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_last_fixed(".r", "") |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = c
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
htmltools::html_print(viewer = NULL)
#
# Build Site ----
# usethis::use_pkgdown()
dir("../resources/R", pattern = "list", full.names = TRUE) |> source();
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_last_fixed(".r", "") |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = c
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE)
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_last_fixed(".r", "") |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = c
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
cat(file = "pkg/toc.html", sep = "\n")
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_last_fixed(".r", "") |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = c
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character() |>
cat(file = "pkg/toc.html", sep = "\n")
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
rmarkdown::render("README.rmd", knit_root_dir = getwd(), intermediates_dir = getwd());
rmarkdown::render("pkg/README.rmd", knit_root_dir = getwd(), intermediates_dir = getwd());
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "z_"), "") |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
)
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "z_"), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
)
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
)
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = c
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character() |>
cat(file = "pkg/toc.html", sep = "\n")
rmarkdown::render("pkg/README.rmd", knit_root_dir = getwd(), intermediates_dir = getwd());
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
htmltools::htmlEscape(c("1", "<"))
htmltools::htmlEscape(c("1", "<")) |> htmltools::html_print()
htmltools::htmlEscape(c("1", "<")) |> paste(collapse = ", ") |> htmltools::html_print()
c("1", "<") |> paste(collapse = ", ") |> htmltools::html_print()
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = \(k) sapply(k, \(i) htmltools::HTML(i) |> as.character())
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character() |>
cat(file = "pkg/toc.html", sep = "\n")
rmarkdown::render("pkg/README.rmd", knit_root_dir = getwd(), intermediates_dir = getwd());
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
rmarkdown::render("pkg/README.rmd", knit_root_dir = getwd(), intermediates_dir = getwd());
# Manually replace `%&gt;&lt;%` with `%<>%`
rstudioapi::navigateToFile("pkg/README.md");
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
library(book.of.utilities)
git2r::branches()
git2r::commits()
git2r::commits(ref = "June2023")
git2r::commits()
git2r::commits(ref = "June2023") |> length()
git2r::commits() |> length()
git_repo <- git2r::get_repository()
git_repo <- git2r::repository(getwd())
git_repo |> plot()
git2r::commits() |> stringi::stri_extract_all_regex("[#].+")
git2r::commits() |> stringi::stri_extract_all_regex("[#].+", omit_no_match = TRUE)
git2r::commits() |>
as.vector() |>
stringi::stri_extract_all_regex("[#].+", omit_no_match = TRUE)
git2r::commits() |>
unlist() |>
stringi::stri_extract_all_regex("[#].+", omit_no_match = TRUE)
git2r::commits()
git2r::commits() |>
unlist()
git2r::commits()
git2r::commits() |>
unlist() |>
stringi::stri_extract_all_regex("[#].+", omit_no_match = TRUE)
git2r::commits() |>
unlist() |>
stringi::stri_extract_all_regex("[#].+", omit_no_match = TRUE, simplify = TRUE) |>
as.vector()
git2r::commits() |>
unlist() |>
stringi::stri_extract_all_regex("[#].+", omit_no_match = TRUE, simplify = TRUE) |>
as.vector() |>
unique()
git2r::commits() |>
unlist() |>
stringi::stri_extract_all_regex("[#].+", omit_no_match = TRUE, simplify = TRUE) |>
as.vector() |>
unique() |>
purrr::discard(~.x == "")
git2r::commits() |>
unlist() |>
stringi::stri_extract_all_regex("[#].+", omit_no_match = TRUE, simplify = TRUE) |>
as.vector() |>
unique() |>
purrr::discard(~.x == "") |>
sort()
git2r::commits() |>
unlist() |>
stringi::stri_extract_all_regex("[#].+", omit_no_match = TRUE, simplify = TRUE) |>
as.vector() |>
unique() |>
purrr::discard(~.x == "") |>
sort()
git2r::last_commit()
#
odds2probs <- function(...){
#' Calculate percentages from odds ratios
#'
#' \code{odds2probs} converts odds ratios to percentages.
#'
#' @param ... (\code{\link[rlang]{dots_list}}): Numeric vectors or "odds" strings (e.g., "x:y"). For vectors or string representations, the number of operands can be of any length but must represent positive real values.
#'
#' @return A numeric vector of the same length as the input(s) representing the percentage of the odds ratio(s).
#'
#' @export
fun <- (\(i, j){
res <- if (i$type == "character" && i$len == 1) {
if (grepl(":", arg_list[[j]])) {
strsplit(arg_list[[j]], ":") |> unlist() |> as.numeric()
} else {
as.numeric(arg_list[[j]])
}
} else if (i$type == "character" && i$len > 1) {
arg_list[[j]] |> unlist() |> as.numeric()
} else if (i$type %in% c("integer", "numeric", "double")) {
if (i$len > 1){
arg_list[[j]]
} else {
as.numeric(arg_list[[j]])
}
} else {
numeric()
}
# browser()
if (rlang::is_empty(res) || (any(res <= 0) & !all(res <= 0))){
NULL
} else if (length(unique(res)) == 1 || all(res <= 0)){
res <- unique(res)
warning("Assuming input as odds ratio ...")
exp(res)/(1 + exp(res))
} else{
res/sum(res)
}
});
arg_list <- rlang::list2(...);
arg_types <- purrr::map(arg_list, \(i) data.frame(type = typeof(i), len = length(i)));
arg_types |> purrr::imap(purrr::possibly(fun, otherwise = NA));
}
odds2probs(c(3, 4), c(3L, 4L), "3:4", c("3", "4"), c(4,5,6), "6:3:1", c(3,-1), "1:1", 1, 2/5, "2:3", 2)
#
odds2probs <- function(...){
#' Calculate percentages from odds ratios
#'
#' \code{odds2probs} converts odds ratios to percentages.
#'
#' @param ... (\code{\link[rlang]{dots_list}}): Numeric vectors or "odds" strings (e.g., "x:y"). For vectors or string representations, the number of operands can be of any length but must represent positive real values.
#'
#' @note
#' Length-1 arguments are assumed to be odds ratios and are converted to percentages via sigmoid function.
#'
#' @return A numeric vector of the same length as the input(s) representing the percentage of the odds ratio(s).
#'
#' @export
fun <- (\(i, j){
res <- if (i$type == "character" && i$len == 1) {
if (grepl(":", arg_list[[j]])) {
strsplit(arg_list[[j]], ":") |> unlist() |> as.numeric()
} else {
as.numeric(arg_list[[j]])
}
} else if (i$type == "character" && i$len > 1) {
arg_list[[j]] |> unlist() |> as.numeric()
} else if (i$type %in% c("integer", "numeric", "double")) {
if (i$len > 1){
arg_list[[j]]
} else {
as.numeric(arg_list[[j]])
}
} else {
numeric()
}
# browser()
if (rlang::is_empty(res) || (any(res <= 0) & !all(res <= 0))){
NULL
} else if (length(unique(res)) == 1 || all(res <= 0)){
res <- unique(res)
# warning("Assuming input as odds ratio ...")
exp(res)/(1 + exp(res))
} else{
res/sum(res)
}
});
arg_list <- rlang::list2(...);
arg_types <- purrr::map(arg_list, \(i) data.frame(type = typeof(i), len = length(i)));
arg_types |> purrr::imap(purrr::possibly(fun, otherwise = NA));
}
odds2probs(c(3, 4), c(3L, 4L), "3:4", c("3", "4"), c(4,5,6), "6:3:1", c(3,-1), "1:1", 1, 2/5, "2:3", 2)
#
odds2probs <- function(...){
#' Calculate percentages from odds ratios
#'
#' \code{odds2probs} converts odds ratios to percentages.
#'
#' @param ... (\code{\link[rlang]{dots_list}}): Numeric vectors or "odds" strings (e.g., "x:y"). For vectors or string representations, the number of operands can be of any length but must represent positive real values.
#'
#' @note
#' Length-1 arguments are assumed to be odds ratios and are converted to percentages via sigmoid function.
#'
#' @return A numeric vector of the same length as the input(s) representing the percentage of the odds ratio(s).
#'
#' @export
fun <- (\(i, j){
res <- if (i$type == "character" && i$len == 1) {
if (grepl(":", arg_list[[j]])) {
strsplit(arg_list[[j]], ":") |> unlist() |> as.numeric()
} else {
as.numeric(arg_list[[j]])
}
} else if (i$type == "character" && i$len > 1) {
arg_list[[j]] |> unlist() |> as.numeric()
} else if (i$type %in% c("integer", "numeric", "double")) {
if (i$len > 1){
arg_list[[j]]
} else {
as.numeric(arg_list[[j]])
}
} else {
numeric()
}
# browser()
if (rlang::is_empty(res) || (any(res <= 0) & !all(res <= 0))){
NULL
} else if (length(unique(res)) == 1 || all(res <= 0)){
res <- unique(res)
# warning("Assuming input as odds ratio ...")
exp(res)/(1 + exp(res))
} else{
res/sum(res)
}
});
arg_list <- rlang::list2(...);
arg_types <- purrr::map(arg_list, \(i) data.frame(type = typeof(i), len = length(i)));
arg_types |> purrr::imap(purrr::possibly(fun, otherwise = NULL));
}
odds2probs(c(3, 4), c(3L, 4L), "3:4", c("3", "4"), c(4,5,6), "6:3:1", c(3,-1), "1:1", 1, 2/5, "2:3", 2)
library(book.of.utilities)
# odds2probs ====
odds2probs(c(3, 4), c(3L, 4L), "3:4", c("3", "4"), c(4,5,6), "6:3:1", c(3,-1), "1:1", 1, 2/5, "2:3", 2)
rm(odds2probs())
rm(odds2probs)
# odds2probs ====
odds2probs(c(3, 4), c(3L, 4L), "3:4", c("3", "4"), c(4,5,6), "6:3:1", c(3,-1), "1:1", 1, 2/5, "2:3", 2)
library(book.of.utilities)
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = \(k) sapply(k, \(i) htmltools::HTML(i) |> as.character())
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character() |>
cat(file = "pkg/toc.html", sep = "\n")
source("D:/Imperial Git Repos/book.of.utilities/table_of_contents.R")
