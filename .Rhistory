x = rnorm(n = 200, mean = 100, sd = sample(100, 1))
mean.x = mean(x)
sd.x = sd(x)
rms.x = book.of.utilities::calc.rms(x)
rm(x, sd.x)
mget(ls())
}) %>%
plot()	# sd.x = sd(x)
purrr::map_dfr(100:1000, ~{
x = runif(n = 200, min = 100, max = 500)
mean.x = mean(x)
sd.x = sd(x)
rms.x = book.of.utilities::calc.rms(x)
rm(x, sd.x)
mget(ls())
}) %>%
plot()	# sd.x = sd(x)
D <- purrr::map_dfr(100:1000, ~{
x = runif(n = 200, min = 100, max = 500)
mean.x = mean(x)
sd.x = sd(x)
rms.x = book.of.utilities::calc.rms(x)
rm(x, sd.x)
mget(ls())
})
abline(reg = lm(mean.x ~ rms.x, data = D))
lm(mean.x ~ rms.x, data = D) %>% coefficients()
plot(D)
abline(coef = lm(mean.x-rms.x ~ mean.x + rms.x, data = D) %>% coefficients())
lm(mean.x-rms.x ~ mean.x + rms.x, data = D) %>% coefficients()
plot(lm(mean.x ~ rms.x, data = D))
plot(lm(mean.x ~ rms.x, data = D) %>% coefficients())
plot(D)
abline(coef = lm(mean.x ~ rms.x, data = D))
abline(reg = lm(mean.x ~ rms.x, data = D))
lm(mean.x ~ rms.x, data = D)
cov(D)
sd(D)
D
D[, 2] - D[, 1]
lm(y = D[, 2] - D[, 1], x = 1)
lm(y ~ 1, data = data.frame(y = D[, 2] - D[, 1]))
data.frame(y = D[, 2] - D[, 1])
lm(y ~ ., data = data.frame(y = D[, 2] - D[, 1]))
lm(y ~ ., data = data.frame(y = as.vector(D[, 2] - D[, 1])))
lm(y ~ 1, data = data.table::data.table(y = as.vector(D[, 2] - D[, 1])))
data.table::data.table(y = as.vector(D[, 2] - D[, 1]))
as.vector(D[, 2] - D[, 1]
)
lm(y ~ 1, data = data.table::data.table(as.vector(D[, 2] - D[, 1])) %>% setnames("y"))
lm(y ~ 1, data = data.table::data.table(as.vector(D[, 2] - D[, 1])) %>% data.table::setnames("y"))
<- purrr::map_dfr(100:1000, ~{
D
D <- purrr::map_dfr(100:1000, ~{
x = runif(n = 200, min = 100, max = 500)
mean.x = mean(x)
sd.x = sd(x)
rms.x = book.of.utilities::calc.rms(x)
rm(x)
mget(ls())
})
lm(sd.x ~ rms.x + mean.x, data = D)
D.mdl <- lm(sd.x ~ rms.x + mean.x, data = D)
D.mdl <- lm(sd.x ~ rms.x + mean.x, data = D)
coefficients(D.mdl)
library(data.table);
D[, as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl[-1]]
D <- purrr::map_dfr(100:1000, ~{
x = runif(n = 200, min = 100, max = 500)
mean.x = mean(x)
sd.x = sd(x)
rms.x = book.of.utilities::calc.rms(x)
rm(x)
mget(ls())
}) %>% as.data.table()
D.mdl <- lm(sd.x ~ rms.x + mean.x, data = D)
D[, as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl[-1]]
D[, as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1]]
D[, .(sd.x, sd.x_fit = as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1])]
D[, .(sd.x, as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1])]
D[, .(sd.x, as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1])] %>% plot()
D[, .(x = .I, y = sd.x, y_hat = as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1])] %$% { plot(x, y, col = "red"); points(x, y_hat, col = "blue") }
D[, .(x = .I, y = sd.x, y_hat = as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1])]
D[, list(x = .I, y = sd.x, y_hat = as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1])
][, { plot(x, y, col = "red"); points(x, y_hat, col = "blue") }]
D[, list(x = .I, y = sd.x, y_hat = as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1])
]
D[, list(x = .I, y = sd.x, y_hat = { as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1] })
]
D[, list(x = .I, y = sd.x, y_hat = { as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1] })
][, { plot(x, y, col = "red"); points(x, y_hat.V1, col = "blue") }]
D[order(sd.x), list(x = .I, y = sd.x, y_hat = { as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1] })
][, { plot(x, y, col = "red"); points(x, y_hat.V1, col = "blue") }]
D[order(sd.x), list(x = .I, y = sd.x, y_hat = { as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1] })
][, {
plot(x, y, col = "red");
points(x, y_hat.V1, col = "blue")
points(x, rms.x, col = "green")
}]
D[order(sd.x), list(x = .I, y = sd.x, rms.x, y_hat = { as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1] })
][, {
plot(x, y, col = "red");
points(x, y_hat.V1, col = "blue")
points(x, rms.x, col = "green")
}]
D[order(sd.x), list(x = .I, y = sd.x, rms.x, y_hat = { as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1] })
]
D[order(sd.x), list(x = .I, y = sd.x, rms.x-mean.x, y_hat = { as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1] })
]
D[order(sd.x), list(x = .I, y = sd.x, rms.x-mean.x, y_hat = { as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1] })
][, {
plot(x, y, col = "red");
points(x, y_hat.V1, col = "blue")
points(x, V3, col = "green")
}]
D[order(sd.x), list(x = .I, y = sd.x, rms.x-sd.x, y_hat = { as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1] })
]
D[order(sd.x), list(x = .I, y = sd.x, rms.x/sd.x, y_hat = { as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1] })
]
D.mdl <- lm(rms.x/sd.x ~ mean.x, data = D)
D[order(sd.x), list(x = .I, y = rms.x/sd.x, y_hat = { as.matrix(.SD[, .(rms.x, mean.x)]) %*% coefficients(D.mdl)[-1] })
]
coefficients(D.mdl)
D[order(sd.x), list(x = .I, y = rms.x/sd.x, y_hat = { (rms.x/sd.x * coefficients(D.mdl)[1]) + (mean.x * coefficients(D.mdl)[-1]) })
]
D[order(sd.x), list(x = .I, y = rms.x/sd.x, y_hat = { (rms.x/sd.x * coefficients(D.mdl)[1]) + (mean.x * coefficients(D.mdl)[-1]) })
][, {
plot(x, y, col = "red");
points(x, y_hat, col = "blue")
}]
D[order(rms.x/sd.x), list(x = .I, y = rms.x/sd.x, y_hat = { (rms.x/sd.x * coefficients(D.mdl)[1]) + (mean.x * coefficients(D.mdl)[-1]) })
]
D[order(rms.x/sd.x), list(x = .I, y = rms.x/sd.x, y_hat = { (rms.x/sd.x * coefficients(D.mdl)[1]) + (mean.x * coefficients(D.mdl)[-1]) })
][, {
plot(x, y, col = "red");
points(x, y_hat, col = "blue")
}]
D[order(rms.x/sd.x), list(x = .I, y = rms.x/sd.x, y_hat = { coefficients(D.mdl)[1] + (mean.x * coefficients(D.mdl)[-1]) })
][, {
plot(x, y, col = "red");
points(x, y_hat, col = "blue")
}]
D[order(mean.x), list(x = .I, y = rms.x/sd.x, y_hat = { coefficients(D.mdl)[1] + (mean.x * coefficients(D.mdl)[-1]) })
][, {
plot(x, y, col = "red");
points(x, y_hat, col = "blue")
}]
D[order(mean.x), list(x = .I, y = rms.x/sd.x, y_hat = { coefficients(D.mdl)[1] + (mean.x * coefficients(D.mdl)[-1]) })
][, {
plot(x, y, col = "red", xlab = "Index", ylab = expression(\frac{"rms.x"}{sd.x}));
points(x, y_hat, col = "blue")
}]
D[order(mean.x), list(x = .I, y = rms.x/sd.x, y_hat = { coefficients(D.mdl)[1] + (mean.x * coefficients(D.mdl)[-1]) })
][, {
plot(x, y, col = "red", xlab = "Index", ylab = expression(frac{"rms.x"}{sd.x}));
points(x, y_hat, col = "blue")
}]
}]
D[order(mean.x), list(x = .I, y = rms.x/sd.x, y_hat = { coefficients(D.mdl)[1] + (mean.x * coefficients(D.mdl)[-1]) })
][, {
plot(x, y, col = "red", xlab = "Index", ylab = expression(frac("rms.x", "sd.x)")));
points(x, y_hat, col = "blue")
}]
D[order(mean.x), list(x = .I, y = rms.x/sd.x, y_hat = { coefficients(D.mdl)[1] + (mean.x * coefficients(D.mdl)[-1]) })
][, {
plot(x, y, col = "red", xlab = "Index", ylab = expression(frac(`rms.x`, `sd.x`)));
points(x, y_hat, col = "blue")
}]
D[order(mean.x), list(x = .I, y = rms.x/sd.x, y_hat = { coefficients(D.mdl)[1] + (mean.x * coefficients(D.mdl)[-1]) })
][, {
plot(x, y, col = "red", xlab = "Index", ylab = "rms.x/sd.x");
points(x, y_hat, col = "blue")
}]
D[order(mean.x), list(mean.x, y = rms.x/sd.x, y_hat = { coefficients(D.mdl)[1] + (mean.x * coefficients(D.mdl)[-1]) })
][, {
plot(mean.x, y, col = "red", xlab = "Index", ylab = "rms.x/sd.x");
points(mean.x, y_hat, col = "blue")
}]
D[order(mean.x), list(mean.x, y = rms.x/sd.x, y_hat = { coefficients(D.mdl)[1] + (mean.x * coefficients(D.mdl)[-1]) })
][, {
plot(mean.x, y, col = "red", ylab = "rms.x/sd.x");
points(mean.x, y_hat, col = "blue")
}]
D.mdl <- glm(rms.x/sd.x ~ mean.x, data = D, family = gaussian)
D[order(mean.x), list(mean.x, y = rms.x/sd.x, y_hat = { coefficients(D.mdl)[1] + (mean.x * coefficients(D.mdl)[-1]) })
][, {
plot(mean.x, y, col = "red", ylab = "rms.x/sd.x");
points(mean.x, y_hat, col = "blue")
}]
D.mdl <- glmnetUtils::cva.glmnet(rms.x/sd.x ~ mean.x, data = D, family = gaussian)
D.mdl <- glmnetUtils::cva.glmnet(formula = rms.x/sd.x ~ mean.x, data = D, family = gaussian)
D
D.mdl <- glmnetUtils::cva.glmnet(formula = c(rms.x/sd.x) ~ mean.x, data = D, family = gaussian)
D.mdl <- glmnetUtils::cva.glmnet(formula = formula(c(rms.x/sd.x) ~ mean.x), data = D, family = gaussian)
D.mdl <- glmnetUtils::cva.glmnet(y = D[, rms.x/sd.x], x = mean.x, family = gaussian)
D.mdl <- glmnetUtils::cva.glmnet(y = D[, rms.x/sd.x], x = D$mean.x, family = gaussian)
D.mdl <- glmnetUtils::cva.glmnet(y = D[, rms.x/sd.x], x = D$mean.x, family = gaussian, data = D)
library(glmnetUtils)
D.mdl <- cva.glmnet(y = D[, rms.x/sd.x], x = D$mean.x, family = gaussian, data = D)
D.mdl <- cva.glmnet(rms.x/sd.x ~ mean.x, family = gaussian, data = D)
D.mdl <- cva.glmnet(rms.x/sd.x ~ mean.x, family = gaussian, data = as.matrix(D))
detach("package:glmnetUtils", unload = TRUE)
library(glmnetUtils)
detach("package:glmnetUtils", unload = TRUE)
library(glmnetUtils)
D.mdl <- cva.glmnet(I(rms.x/sd.x) ~ mean.x, family = gaussian, data = as.matrix(D))
D
D.mdl <- cva.glmnet(y_a/y_b ~ x, family = gaussian, data = setnames(copy(D), c("x", "y_a", "y_b")))
install.packages("glmnetUtils")
library(magrittr);
library(data.table);
library(glmnetUtils)
D <- purrr::map_dfr(100:1000, ~{
x = runif(n = 200, min = 100, max = 500)
mean.x = mean(x)
sd.x = sd(x)
rms.x = book.of.utilities::calc.rms(x)
rm(x)
mget(ls())
}) %>% as.data.table()
D.mdl <- cva.glmnet(y_a/y_b ~ x, family = gaussian, data = setnames(copy(D), c("x", "y_a", "y_b")))
D.mdl <- glmnet(y_a/y_b ~ x, family = gaussian, data = setnames(copy(D), c("x", "y_a", "y_b")))
D.mdl <- glm(y_a/y_b ~ x, family = gaussian, data = setnames(copy(D), c("x", "y_a", "y_b")))
D.mdl
D[order(mean.x), list(mean.x, y = rms.x/sd.x, y_hat = { coefficients(D.mdl)[1] + (mean.x * coefficients(D.mdl)[-1]) })
][, {
plot(mean.x, y, col = "red", ylab = "rms.x/sd.x");
points(mean.x, y_hat, col = "blue")
}]
library(glmnet)
D.mdl <- cva.glmnet(y_a/y_b ~ x, family = gaussian, data = setnames(copy(D), c("x", "y_a", "y_b")))
str(D)
D[, y := rms.x/sd.x]
D.mdl <- cva.glmnet(y ~ mean.x, family = gaussian, data = D)
D.mdl <- cva.glmnet(y ~ mean.x, family = gaussian, data = as.data.frame(D))
D.mdl <- cva.glmnet(y ~ mean.x, family = gaussian, data = as.matrix(D))
D.mdl <- cva.glmnet(y ~ mean.x, family = gaussian, data = as.data.frame(D))
D.mdl <- cva.glmnet(y ~ mean.x, family = gaussian, data = model.frame(y ~ mean.x, data = D))
model.frame(y ~ mean.x, data = D)
D.mdl <- cv.glmnet(x = D[, .(`1` = 1, mean.x)], y = D$y, data = D)
D.mdl <- cv.glmnet(x = D[, .(`1` = 1, mean.x)], y = D$y, data = as.matrix(D))
as.matrix(D)
D.mdl <- cv.glmnet(x = D[, .(`1` = 1, mean.x)], y = D$y)
D.mdl <- cv.glmnet(x = as.matrix(D[, .(mean.x)]), y = D$y)
D.mdl <- cv.glmnet(x = as.matrix(D[, .(y, mean.x)]), y = D$y)
D.mdl <- cva.glmnet(x = as.matrix(D[, .(`1` = 1, mean.x)]), y = D$y)
D.mdl
plot(D.mdl)
D.mdl$alpha
D.mdl$modlist %>% map(~.x$cvm)
D.mdl$modlist %>% purrr::map(~.x$cvm)
D.mdl$modlist %>% purrr::map(~.x$cvm %>% calc.rms())
D.mdl$modlist %>% purrr::map(~.x$cvm %>% sum())
D.mdl$modlist %>% purrr::map_dbl(~.x$cvm %>% sum())
D.mdl %$% {
plot(alpha, modlist %>% purrr::map_dbl(~.x$cvm %>% sum()))
}
D.mdl %$% {
plot(alpha, modlist %>% purrr::map_dbl(~.x$cvm %>% sum()), type = "b")
}
D.mdl %$% modlist[which(alpha == 1)]
D.mdl %$% modlist[which(alpha == 1)] %>% coefficients()
D.mdl %$% modlist[which(alpha == 1)] %>% ls()
D.mdl %$% modlist[which(alpha == 1)] %$% ls()
D.mdl %$% modlist[[which(alpha == 1)]] %$% ls()
D.mdl %$% modlist[[which(alpha == 1)]] %$% glmnet.fit
D.mdl %$% modlist[[which(alpha == 1)]] %$% glmnet.fit %$% ls()
D.mdl %$% modlist[[which(alpha == 1)]] %$% glmnet.fit %$% coef()
D.mdl %$% modlist[[which(alpha == 1)]] %$% glmnet.fit %>% coef()
D.mdl %$% modlist[[which(alpha == 1)]] %$% glmnet.fit %>% coef() %>% .[c("(Intercept)", "mean.x")]
D.mdl %$% modlist[[which(alpha == 1)]] %$% glmnet.fit %>% coef() %>% .[c("(Intercept)", "mean.x"), ]
D.mdl %$% modlist[[which(alpha == 1)]] %$% ls()
D.mdl %$% modlist[[which(alpha == 1)]] %$% glmnet.fit
D.mdl %$% modlist[[which(alpha == 1)]]  %>% coef()
D.mdl %$% modlist[[which(alpha == 1)]]  %>% coef() %>% .[c("(Intercept)", "mean.x"), ]
D[order(mean.x), list(mean.x, y = rms.x/sd.x, y_hat = { coefficients(D.mdl)[1] + (mean.x * {D.mdl %$% modlist[[which(alpha == 1)]]  %>% coef() %>% .[c("(Intercept)", "mean.x"), ]}) })
]
D.mdl_coefs <- D.mdl %$% modlist[[which(alpha == 1)]]  %>% coef() %>% .[c("(Intercept)", "mean.x"), ]
D.mdl_coefs[2]
D.mdl_coefs[1]
D[order(mean.x), list(mean.x, y = rms.x/sd.x, y_hat = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) })
]
D[order(mean.x), list(mean.x, y = rms.x/sd.x, y_hat = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) })
][, {
plot(mean.x, y, col = "red", ylab = "rms.x/sd.x");
points(mean.x, y_hat, col = "blue")
}]
D[order(mean.x), list(mean.x, y = rms.x/sd.x, y_hat = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) })
][, {
plot(mean.x, y, col = "red", ylab = "rms.x/sd.x");
points(mean.x, y_hat, col = "blue")
}]
D.mdl %$% {
plot(alpha %>% diff(), modlist %>% purrr::map_dbl(~.x$cvm %>% sum()) %>% diff(), type = "b")
}
D.mdl %$% {
plot(c(0, alpha %>% diff()), c(0, modlist %>% purrr::map_dbl(~.x$cvm %>% sum()) %>% diff()), type = "b")
}
D.mdl_coefs <- D.mdl %$% modlist[[4]]  %>% coef() %>% .[c("(Intercept)", "mean.x"), ]
D[order(mean.x), list(mean.x, y = rms.x/sd.x, y_hat = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) })
][, {
plot(mean.x, y, col = "red", ylab = "rms.x/sd.x");
points(mean.x, y_hat, col = "blue")
}]
D.mdl <- cva.glmnet(x = as.matrix(D[, .(`1` = 1, mean.x)]), y = D$y, standardize.x = TRUE)
D.mdl %$% {
plot(c(0, alpha %>% diff()), c(0, modlist %>% purrr::map_dbl(~.x$cvm %>% sum()) %>% diff()), type = "b")
}
D.mdl_coefs <- D.mdl %$% modlist[[4]]  %>% coef() %>% .[c("(Intercept)", "mean.x"), ]
D[order(mean.x), list(mean.x, y = rms.x/sd.x, y_hat = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) })
][, {
plot(mean.x, y, col = "red", ylab = "rms.x/sd.x");
points(mean.x, y_hat, col = "blue")
}]
D.mdl_coefs
D.mdl <- cva.glmnet(x = as.matrix(D[, .(sd.x, mean.x)]), y = D$rms.x)
D.mdl %$% {
plot(c(0, alpha %>% diff()), c(0, modlist %>% purrr::map_dbl(~.x$cvm %>% sum()) %>% diff()), type = "b")
}
D.mdl_coefs <- D.mdl %$% modlist[[3]]  %>% coef() %>% .[c("(Intercept)", "mean.x"), ]
D.mdl_coefs <- D.mdl %$% modlist[[3]]  %>% coef() %>% .[c("(Intercept)", "mean.x", "sd.x"), ]
D.mdl_coefs
.mdl_coefs
D[order(mean.x), list(mean.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
]
D[order(mean.x), list(mean.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][, {
plot(mean.x, y, col = "red", ylab = "rms.x/sd.x");
points(mean.x, y_hat, col = "blue")
}]
D[order(mean.x), list(mean.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][, {
plot(mean.x, y, col = "red", ylab = "rms.x", xlab = "~mean.x + sd.x");
points(mean.x, y_hat, col = "blue")
}]
D[order(mean.x, sd.x)
, list(x = .I, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(x, y, col = "red", ylab = "rms.x", xlab = "~mean.x + sd.x");
points(x, y_hat, col = "blue")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(x, rms.x, col = "red", ylab = "rms.x", xlab = "~mean.x + sd.x");
points(x, y, col = "blue")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(x, rms.x, col = "red", ylab = "rms.x", xlab = "~mean.x + sd.x");
points(x = sort(runif(n = length(x), min = min(x), max = max(x))), y, col = "blue")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(x, rms.x, col = "red", ylab = "rms.x", xlab = "~mean.x + sd.x");
points(x = mean.x, col = "blue")
plot(x = sd.x, y = y, col = "green")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, mean.x, sd.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(x, rms.x, col = "red", ylab = "rms.x", xlab = "~mean.x + sd.x");
points(x = mean.x, col = "blue")
plot(x = sd.x, y = y, col = "green")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, mean.x, sd.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(mean.x, rms.x, col = "red", ylab = "rms.x", xlab = "~mean.x + sd.x");
points(x = mean.x, y = y, col = "blue")
plot(x = sd.x, rms.x, col = "red", ylab = "rms.x", xlab = "~mean.x + sd.x");
plot(x = sd.x, y = y, col = "green")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, mean.x, sd.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(mean.x, rms.x, col = "red", ylab = "rms.x", xlab = "~mean.x + sd.x");
points(x = mean.x, y = y, col = "blue")
plot(x = sd.x, rms.x, col = "red", ylab = "rms.x", xlab = "~mean.x + sd.x");
points(x = sd.x, y = y, col = "green")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, mean.x, sd.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(mean.x, rms.x, col = "red", ylab = "rms.x", xlab = "mean.x");
points(x = mean.x, y = y, col = "blue")
plot(x = sd.x, rms.x, col = "red", ylab = "rms.x", xlab = "sd.x");
points(x = sd.x, y = y, col = "green")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, mean.x, sd.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(mean.x, rms.x, ylab = "rms.x", xlab = "mean.x");
points(x = mean.x, y = y, col = "blue")
plot(x = sd.x, rms.x, ylab = "rms.x", xlab = "sd.x");
points(x = sd.x, y = y, col = "green")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, mean.x, sd.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(mean.x, rms.x, ylab = "rms.x", xlab = "mean.x");
points(x = mean.x, y = y, col = "green ")
plot(x = sd.x, rms.x, ylab = "rms.x", xlab = "sd.x");
points(x = sd.x, y = y, col = "green")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, mean.x, sd.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(x = mean.x, y = rms.x/2, ylab = expression(frac("rms.x", 2)), xlab = "mean.x");
points(x = mean.x, y = y, col = "green ")
plot(x = sd.x, y = rms.x, ylab = expression(frac("rms.x",2)), xlab = "sd.x");
points(x = sd.x, y = y, col = "green")
}]
plot(x = mean.x, y = rms.x/2, ylab = expression({frac("rms.x", 2)}), xlab = "mean.x");
D[order(mean.x, sd.x)
, list(x = .I, rms.x, mean.x, sd.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(x = mean.x, y = rms.x/2, ylab = expression({frac("rms.x", 2)}), xlab = "mean.x");
points(x = mean.x, y = y, col = "green ")
plot(x = sd.x, y = rms.x, ylab = expression(frac("rms.x",2)), xlab = "sd.x");
points(x = sd.x, y = y, col = "green")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, mean.x, sd.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(x = mean.x, y = rms, ylab = "rms", xlab = "mean.x");
points(x = mean.x, y = y, col = "green ")
plot(x = sd.x, y = rms.x/2, ylab = "rms/2", xlab = "sd.x");
points(x = sd.x, y = y, col = "green")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, mean.x, sd.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(x = mean.x, y = rms.x, ylab = "rms.x", xlab = "mean.x");
points(x = mean.x, y = y, col = "green ")
plot(x = sd.x, y = rms.x/2, ylab = "rms.x/2", xlab = "sd.x");
points(x = sd.x, y = y, col = "green")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, mean.x, sd.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(x = mean.x, y = rms.x, ylab = "rms.x", xlab = "mean.x");
points(x = mean.x, y = y, col = "green ")
plot(x = sd.x, y = rms.x/2, ylab = "rms.x/2", xlab = "sd.x");
points(x = sd.x, y = y, col = "green")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, mean.x, sd.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(x = mean.x, y = rms.x, ylab = "rms.x", xlab = "mean.x");
points(x = mean.x, y = y, col = "green ")
plot(x = sd.x, y = rms.x/2, ylab = "rms.x/2", xlab = "sd.x");
# points(x = sd.x, y = y, col = "green")
}]
D[order(mean.x, sd.x)
, list(x = .I, rms.x, mean.x, sd.x, y = { D.mdl_coefs[1] + (mean.x * D.mdl_coefs[2]) + (sd.x * D.mdl_coefs[3]) })
][,{
plot(x = mean.x, y = rms.x, ylab = "rms.x", xlab = "mean.x", col= "blue");
points(x = mean.x, y = y, col = "red ")
plot(x = sd.x, y = rms.x/2, ylab = "rms.x/2", xlab = "sd.x", col = "blue");
points(x = sd.x, y = y, col = "red")
}]
D[, rms.x/2, sd.x]
D[, rms.x/2, sd.x] %>% plot()
D[, .(rms.x/2, sd.x)] %>% plot()
D[, .(rms.x/2 - sd.x)] %>% plot()
D[, .(rms.x/2 - sd.x)]
D[, .(y = rms.x/2 - sd.x)] %>% plot()
D[, .(x = .I, y = rms.x/2 - sd.x)] %>% plot()
D[order(rms.x), .(x = .I, y = rms.x/2 - sd.x)] %>% plot()
D[order(rms.x), .(x = .I, y = rms.x - sd.x)] %>% plot()
D[order(rms.x), .(x = .I, y = rms.x - mean.x)] %>% plot()
D[order(rms.x), .(x = .I, y = rms.x - mean.x)] %>% box()
D[order(rms.x), .(x = .I, y = rms.x - mean.x)] %>% boxplot()
D[order(rms.x), rms.x - mean.x] %>% boxplot()
D[order(rms.x), rms.x - weighted.mean(mean.x, sd.x)] %>% boxplot()
D[order(rms.x), rms.x - weighted.mean(mean.x, sd.x)] %>% plot()
D[order(rms.x), mean.x - weighted.mean(rms.x, sd.x)] %>% plot()
D[order(rms.x), rms.x - weighted.mean(mean.x, sd.x)] %>% boxplot()
D[order(rms.x), rms.x - weighted.mean(mean.x, sd.x)] %>% plot()
D[order(rms.x), rms.x - weighted.mean(mean.x, sd.x)] %>% plot()
D[order(rms.x), (rms.x - mean.x)/sd.x)] %>% plot()
D[order(rms.x), (rms.x - mean.x)/sd.x] %>% plot()
D[order(rms.x), (rms.x - mean.x)/mean.x] %>% plot()
D[order(rms.x), (rms.x - mean.x)/mean.x] %>% densit() %>% plot()
D[order(rms.x), (rms.x - mean.x)/mean.x] %>% density() %>% plot()
library(book.of.workflow)
book.of.utilities::log_note("Functions for review:\n\t- 2. object_management.R:\n\t   * distinct.list(): speed improvements (C?)\n\t   * enlist(): allow NULL in `...` to indicate using existing value as name\n\t   * scrub.data(): allow for vectorized replacement and lambda formula for `condFn`", file = "developer_notes.txt")
book.of.utilities::log_note("Functions for review:\n\t- 3. counters.R:\n\t   * do_count: remove\n\t   * count.cycles: add support for quoted expressions for `cond` and `reset`\n\t   * ", file = "developer_notes.txt")
book.of.utilities::log_note("Functions for review:\n\t- 5. miscellaneous\n\t   * log_note: add additional newline to output", file = "developer_notes.txt")
pkgdown::build_site()
library(book.of.utilities)
<<<<<<< Updated upstream
detach("package:book.of.utilities", unload = TRUE)
detach("package:book.of.workflow", unload = TRUE)
library(book.of.utilities)
detach("package:book.of.utilities", unload = TRUE)
library(book.of.utilities)
x <- sample(100, 50)
calc.zero_mean(x)
calc.zero_mean(x, as.zscore = TRUE)
calc.zero_mean(x, use.population = TRUE )
calc.zero_mean(x, as.zscore = TRUE, use.population = TRUE)
detach("package:book.of.utilities", unload = TRUE)
pkgdown::build_site()
library(book.of.utilities)
library(book.of.utilities)
pkgdown::build_site()
library(book.of.utilities)
mark.time()
pkgdown::build_site()
=======
distinct.list <- function(i, logical.only = FALSE){
#' Unique List Selection
#'
#' Return the distinct set of first-level list elements based on their respective base64-encoded signatures.  This is an inefficient implementation used for nested lists
#'
#' @param i (object) The input list object (or coercible)
#' @param logical.only (logical) When \code{TRUE}, a logical vector is returned
#'
#' @return The list with unique, first-level child elements
#' @family List management
#'
#' @family Object management
#'
# @export
i = if (any(class(i) %in% c("data.table", "data.frame", "tibble"))){ as.list(i) } else { i }
x <- slider::slide(.x = i, .step = 1, .f = purrr::as_mapper(~sodium::hash(serialize(object = .x, connection = NULL), size = 24))) |> duplicated() |> magrittr::not()
if (logical.only){ x } else { i[x] }
}
#
factor.int <- function(i, ...){
#' Factorization of Integers
#'
#' @param i (integer[]) One or more integers to factor
#' @param ... Additional integers to factor (can be used in conjunction with \code{i})
#'
#' @return The factors of the input given as an vector or list of vectors
#'
#' @family Counters
#'
#' @export
if (missing(i) & ...length() == 0){ message("[ERROR] Please supply integer values to either 'i' or '...'"); return(0); }
if (missing(i) & ...length() != 0){ i <- 0 }
i <- c(i, rlang::list2(...));
if (is.list(i)){ i <- unlist(i, use.names = FALSE) }
if (is.factor(i)){ i <- as.integer(i) }
if (is.character(i)){ i <- as.integer(i) }
if (is.numeric(i)){ i <- as.integer(i) }
i <- purrr::set_names(i);
.out = purrr::map(i, ~{ .int = .x; purrr::keep(sequence(.int), ~.int %% .x == 0) });
if (length(i) > 1){ distinct.list(.out[order(as.integer(names(.out)))]) } else { unlist(.out, use.names = FALSE) }
}
factor.int(1, 3)
c(1,3) |> factor.int()
library(book.of.utilities)
>>>>>>> Stashed changes
