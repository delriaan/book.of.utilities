env <- new.env();
source(x$path, local = env)
pkg_doc_content <<- pkg_doc_content |>
c(paste(
glue::glue("#' @section Chapter {y} - {x$title}: ")
, sprintf("#' \\item{\\code{\\link{%s}}}", ls(env)) |>
stringi::stri_replace_all_fixed("%", "\\%", vectorise_all = TRUE) |>
paste(collapse = "\n") |>
sprintf(fmt = pkg_template)
, sep = "\n"
)) |> unique()
toc_content <<- toc_content |>
c(paste(
glue::glue("## Chapter {y} - {x$title}\n\n")
, sprintf("- %s", ls(env)) |> paste(collapse = "\n")
, sep = "\n"
)) |> unique()
})
#
pkg_doc_header <- { paste(
glue::glue("#' @title {pkg_title}")
, "#"
, "#' @description"
, glue::glue("#' {pkg_desc$get_field(\"Description\")}")
, "#'"
, glue::glue("#' The following functional chapters are covered in \\code{{{pkg_name}}}:\\cr")
, sep = "\n"
)}
#
toc_header <- { paste(
glue::glue("# ![book](book_small.png) {pkg_title}\n\n")
, glue::glue("{pkg_desc$get_field(\"Description\")}")
, glue::glue("The following functional families are covered in `{pkg_name}`:")
, sep = "\n"
)}
#
pkg_doc_footer <- { dir("pkg/R", pattern = "R$", full.names = TRUE) |>
sapply(\(f) readLines(f) |> grep(pattern = "[@]import", value = TRUE)) |>
unlist() |>
trimws() |>
unique() |>
paste(collapse = "\n") |>
sprintf(fmt = "#'\n%1$s\n#' @name %2$s\nNULL\n", pkg_name)
}
unlink(pkg_file)
unlink(toc_file)
cat(pkg_doc_header, pkg_doc_content, pkg_doc_footer, sep = "\n#'\n", file = pkg_file)
cat(toc_header, toc_content, sep = "\n\n", file = toc_file, append = FALSE)
dir("../resources/R", pattern = "list", full.names = TRUE) |> source();
toc_html <- dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = \(k) sapply(k, \(i) htmltools::HTML(i) |> as.character())
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character()
dep_html <- htmltools::tagList(
desc::desc(package = pkg_name)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::HTML()
) |>
as.character()
if (file.exists("pkg/README.rmd")){
knitr::knit(input = "pkg/README.rmd", output = "pkg/README.md", envir = globalenv());
}
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
paste0("miscell|other|", pkg_name)
sprintf("(miscell|other|%s)", pkg_name)
i <- which(grepl(
))
sprintf("miscell|other|(%s)", pkg_name)
#
# Generation ----
pkg_doc_prep <- dir("pkg/R", pattern = "R$", recursive = TRUE, full.names = TRUE) |>
(\(x){
i <- which(grepl(sprintf("miscell|other|(%s)", pkg_name), x));
if (rlang::is_empty(i)){ x } else { c(x[-i], x[i]) }
})() |>
purrr::discard(\(x) grepl(pkg_name, x)) |>
purrr::map(\(x){
list(path = x, title = { stringi::stri_replace_all_regex(x, c("pkg/R/", "[.]R$", "[_]"), c("", "", " "), vectorise_all = FALSE) |>
stringi::stri_trans_totitle() })
})
pkg_doc_prep
pkg_template <- c("#' \\itemize{", "%s", "#' }") |> paste(collapse = "\n")
pkg_doc_content <- c()
toc_content <- c()
# Populate content
# Populate content
pkg_doc_prep |> purrr::iwalk(\(x, y){
env <- new.env();
source(x$path, local = env)
pkg_doc_content <<- pkg_doc_content |>
c(paste(
glue::glue("#' @section Chapter {y} - {x$title}: ")
, sprintf("#' \\item{\\code{\\link{%s}}}", ls(env)) |>
stringi::stri_replace_all_fixed("%", "\\%", vectorise_all = TRUE) |>
paste(collapse = "\n") |>
sprintf(fmt = pkg_template)
, sep = "\n"
)) |> unique()
toc_content <<- toc_content |>
c(paste(
glue::glue("## Chapter {y} - {x$title}\n\n")
, sprintf("- %s", ls(env)) |> paste(collapse = "\n")
, sep = "\n"
)) |> unique()
})
#
pkg_doc_header <- { paste(
glue::glue("#' @title {pkg_title}")
, "#"
, "#' @description"
, glue::glue("#' {pkg_desc$get_field(\"Description\")}")
, "#'"
, glue::glue("#' The following functional chapters are covered in \\code{{{pkg_name}}}:\\cr")
, sep = "\n"
)}
#
toc_header <- { paste(
glue::glue("# ![book](book_small.png) {pkg_title}\n\n")
, glue::glue("{pkg_desc$get_field(\"Description\")}")
, glue::glue("The following functional families are covered in `{pkg_name}`:")
, sep = "\n"
)}
#
pkg_doc_footer <- { dir("pkg/R", pattern = "R$", full.names = TRUE) |>
sapply(\(f) readLines(f) |> grep(pattern = "[@]import", value = TRUE)) |>
unlist() |>
trimws() |>
unique() |>
paste(collapse = "\n") |>
sprintf(fmt = "#'\n%1$s\n#' @name %2$s\nNULL\n", pkg_name)
}
#
# Output ----
unlink(pkg_file)
unlink(toc_file)
cat(pkg_doc_header, pkg_doc_content, pkg_doc_footer, sep = "\n#'\n", file = pkg_file)
cat(toc_header, toc_content, sep = "\n\n", file = toc_file, append = FALSE)
dir("../resources/R", pattern = "list", full.names = TRUE) |> source();
toc_html <- dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = \(k) sapply(k, \(i) htmltools::HTML(i) |> as.character())
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character()
# <snippet: build site> ----
dep_html <- htmltools::tagList(
desc::desc(package = pkg_name)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::HTML()
) |>
as.character()
if (file.exists("pkg/README.rmd")){
knitr::knit(input = "pkg/README.rmd", output = "pkg/README.md", envir = globalenv());
}
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
toc_content <- c()
# Populate content
pkg_doc_prep |> purrr::iwalk(\(x, y){
env <- new.env();
source(x$path, local = env)
pkg_doc_content <<- pkg_doc_content |>
c(paste(
glue::glue("#' @section Chapter {y} - {x$title}: ")
, sprintf("#' \\item{\\code{\\link{%s}}}", ls(env)) |>
stringi::stri_replace_all_fixed("%", "\\%", vectorise_all = TRUE) |>
paste(collapse = "\n") |>
sprintf(fmt = pkg_template)
, sep = "\n"
)) |> unique()
toc_content <<- toc_content |>
c(paste(
glue::glue("## Chapter {y} - {x$title}\n\n")
, sprintf("- %s", ls(env)) |> paste(collapse = "\n")
, sep = "\n"
)) |> unique()
})
toc_content
pkg_doc_header <- { paste(
glue::glue("#' @title {pkg_title}")
, "#"
, "#' @description"
, glue::glue("#' {pkg_desc$get_field(\"Description\")}")
, "#'"
, glue::glue("#' The following functional chapters are covered in \\code{{{pkg_name}}}:\\cr")
, sep = "\n"
)}
#
toc_header <- { paste(
glue::glue("# ![book](book_small.png) {pkg_title}\n\n")
, glue::glue("{pkg_desc$get_field(\"Description\")}")
, glue::glue("The following functional families are covered in `{pkg_name}`:")
, sep = "\n"
)}
#
pkg_doc_footer <- { dir("pkg/R", pattern = "R$", full.names = TRUE) |>
sapply(\(f) readLines(f) |> grep(pattern = "[@]import", value = TRUE)) |>
unlist() |>
trimws() |>
unique() |>
paste(collapse = "\n") |>
sprintf(fmt = "#'\n%1$s\n#' @name %2$s\nNULL\n", pkg_name)
}
toc_content
#
# Output ----
unlink(pkg_file)
unlink(toc_file)
cat(pkg_doc_header, pkg_doc_content, pkg_doc_footer, sep = "\n#'\n", file = pkg_file)
cat(toc_header, toc_content, sep = "\n\n", file = toc_file, append = FALSE)
toc_file
toc_html <- dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = \(k) sapply(k, \(i) htmltools::HTML(i) |> as.character())
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character()
toc_html <- dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = \(k) sapply(k, \(i) htmltools::HTML(i) |> as.character())
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character()
# <snippet: build site> ----
dep_html <- htmltools::tagList(
desc::desc(package = pkg_name)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::HTML()
) |>
as.character()
if (file.exists("pkg/README.rmd")){
knitr::knit(input = "pkg/README.rmd", output = "pkg/README.md", envir = globalenv());
}
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
toc_html
toc_html |> htmltools::html_print()
toc_html |> htmltools::HTML() |> htmltools::html_print()
toc_content
pkg_desc <- desc::desc(file = "pkg/DESCRIPTION")
pkg_name <- pkg_desc$get_field("Package")
pkg_title <- pkg_desc$get_field("Title")
pkg_file <- glue::glue("pkg/R/{pkg_name}.R")
toc_file <- "pkg/README.md"
#
# Generation ----
pkg_doc_prep <- dir("pkg/R", pattern = "R$", recursive = TRUE, full.names = TRUE) |>
(\(x){
i <- which(grepl(sprintf("miscell|other|(%s)", pkg_name), x));
if (rlang::is_empty(i)){ x } else { c(x[-i], x[i]) }
})() |>
purrr::discard(\(x) grepl(pkg_name, x)) |>
purrr::map(\(x){
list(path = x, title = { stringi::stri_replace_all_regex(x, c("pkg/R/", "[.]R$", "[_]"), c("", "", " "), vectorise_all = FALSE) |>
stringi::stri_trans_totitle() })
})
#
pkg_template <- c("#' \\itemize{", "%s", "#' }") |> paste(collapse = "\n")
pkg_doc_content <- c()
toc_content <- c()
# Populate content
pkg_doc_prep |> purrr::iwalk(\(x, y){
env <- new.env();
source(x$path, local = env)
pkg_doc_content <<- pkg_doc_content |>
c(paste(
glue::glue("#' @section Chapter {y} - {x$title}: ")
, sprintf("#' \\item{\\code{\\link{%s}}}", ls(env)) |>
stringi::stri_replace_all_fixed("%", "\\%", vectorise_all = TRUE) |>
paste(collapse = "\n") |>
sprintf(fmt = pkg_template)
, sep = "\n"
)) |> unique()
toc_content <<- toc_content |>
c(paste(
glue::glue("## Chapter {y} - {x$title}\n\n")
, sprintf("- %s", ls(env)) |> paste(collapse = "\n")
, sep = "\n"
)) |> unique()
})
#
pkg_doc_header <- { paste(
glue::glue("#' @title {pkg_title}")
, "#"
, "#' @description"
, glue::glue("#' {pkg_desc$get_field(\"Description\")}")
, "#'"
, glue::glue("#' The following functional chapters are covered in \\code{{{pkg_name}}}:\\cr")
, sep = "\n"
)}
#
toc_header <- { paste(
glue::glue("# ![book](book_small.png) {pkg_title}\n\n")
, glue::glue("{pkg_desc$get_field(\"Description\")}")
, glue::glue("The following functional families are covered in `{pkg_name}`:")
, sep = "\n"
)}
#
pkg_doc_footer <- { dir("pkg/R", pattern = "R$", full.names = TRUE) |>
sapply(\(f) readLines(f) |> grep(pattern = "[@]import", value = TRUE)) |>
unlist() |>
trimws() |>
unique() |>
paste(collapse = "\n") |>
sprintf(fmt = "#'\n%1$s\n#' @name %2$s\nNULL\n", pkg_name)
}
#
#
# Output ----
unlink(pkg_file)
unlink(toc_file)
cat(pkg_doc_header, pkg_doc_content, pkg_doc_footer, sep = "\n#'\n", file = pkg_file)
cat(toc_header, toc_content, sep = "\n\n", file = toc_file, append = FALSE)
toc_content
stringi::stri_extract_first_regex(toc_content, "(?<=\#\# ).+(?=\n")
stringi::stri_extract_first_regex(toc_content, "(?<=[#]{2} ).+(?=\n")
stringi::stri_extract_first_regex(toc_content, "(?<=[#]{2}[[:space:]]).+(?=\n")
stringi::stri_extract_first_regex(toc_content, "(?<=[#]{2}[[:space:]]).+(?=(\n)")
stringi::stri_extract_first_regex(toc_content, "(?<=#{2}[[:space:]]).+(?=(\n)")
stringi::stri_extract_first_regex(toc_content, "(?<=#).+")
stringi::stri_extract_first_regex(toc_content, "(?<=#{2}).+")
stringi::stri_extract_first_regex(toc_content, "(?<=#{2} ).+")
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws())
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
stringi::stri_split_regex("\n", simplify = FALSE)
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_split_regex(x, "\n", simplify = TRUE))
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_split_regex(x, "(?<=\n[-] )", simplify = TRUE, omit_empty = TRUE) |> as.vector())
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_split_regex(x, "(?<=(\n[-] ))", simplify = TRUE, omit_empty = TRUE) |> as.vector())
purrr::map(\(i){
})
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_split_regex(x, "(?<=(\n[-] ))", simplify = TRUE, omit_empty = TRUE) |> as.vector())
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_extract_first_regex(x, "(?<=(\n[-] ))", omit_empty = TRUE) |> as.vector())
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_extract_first_regex(x, "(?<=(\n[-] ))"))
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_extract_first_regex(x, "(?<=(^\n[-] ))"))
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_extract_all_regex(x, "(?<=([-] ))"))
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_extract_all_regex(x, "(?<=(\n[-] ))"))
toc_content
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_split_regex(x, "\n[-] "))
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_split_regex(x, "^\n[-] "))
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_split_regex(x, "\n[-] ")[-1])
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_split_regex(x, "\n[-] ") %>% .[-1])
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_split_regex(x, "\n[-] "))
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_split_regex(x, "\n[-] ") |> as.vector())
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_split_regex(x, "\n[-] ") |> unlist())
toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(x) stringi::stri_split_regex(x, "\n[-] ") |> unlist() %>% .[-1])
toc_html <- toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(i){
stringi::stri_split_regex(i, "\n[-] ") |> unlist() %>% .[-1]) |>
toc_html <- toc_content %>%
rlang::set_names(stringi::stri_extract_first_regex(., "(?<=#{2} ).+") |> trimws()) |>
purrr::map(\(i){
stringi::stri_split_regex(i, "\n[-] ") |>
unlist() %>%
.[-1] |>
# readLines(paste0("pkg/R/", i)) |>
# 	stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
# 	sapply(\(k){
# 		stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
# 	}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = \(k) sapply(k, \(i) htmltools::HTML(i) |> as.character())
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character()
toc_html
toc_html |> htmltools::HTML() |> htmltools::html_print()
# <snippet: build site> ----
dep_html <- htmltools::tagList(
desc::desc(package = pkg_name)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::HTML()
) |>
as.character()
if (file.exists("pkg/README.rmd")){
knitr::knit(input = "pkg/README.rmd", output = "pkg/README.md", envir = globalenv());
}
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
